<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ssafy.model.dao.YoutuberDao">

	<!-- 여러개가 나오더라도 resultType에는 리스트 형으로 쓰지 않는다 -->

	<!-- youtuber 고유번호 | youtuber 정보 조회 -->
	<select id="search" parameterType="int" resultType="youtuber">
		select *
		from youtuber
		where yno=#{yno}
	</select>
	
	<!-- youtuber 고유번호 | youtuber가 속한 카테고리 목록 검색 | 카테고리 번호로 오름차순 정렬 -->
	<select id="searchCategoryList" parameterType="int" resultType="category">
		select distinct cy.cano cano, c.name name
		from category_youtube_relation cy inner join category c
		using (cano)
		where cy.yno = #{yno}
		order by cano asc
	</select>

	<!-- keyword | 채널 이름,유튜버 이름에 keyword가 포함된 youtuber 목록 검색 | 구독자 순 내림차순 정렬 -->
	<select id="searchKeyword" parameterType="String" resultType="youtuber">
		select *
		from youtuber
		where channelName like concat('%', #{keyword}, '%')
		 or youtuberName like concat('%', #{keyword}, '%')
		 or json_keys(tagCloud) like concat('%\"', #{keyword}, '\"%')
		<!--  or channelDescription like concat('%', #{keyword}, '%') -->
		order by subscriber desc
	</select>
	
	<!-- youtuber 전체 목록 조회 | 구독자 수 기준 내림차순 정렬 -->
	<select id="searchAll" resultType="youtuber">
		select *
		from youtuber
		order by subscriber desc
	</select>
	
	<!-- 정렬 조건, 검색 개수 | 정렬 조건(subscriber,totalViewCount,totalVideoCount,grade,clickCount,updatedDate) 으로 정렬 후 검색 개수만큼 가져옴 | 정렬 기준으로 내림차순 -->
	<!-- 정렬 조건이 잘못 입력된 경우 아무것도 반환하지 않음-->
	<select id="searchRanking" parameterType="java.util.Map" resultType="youtuber">
		<if test="searchCondition != null">
			select *
			from youtuber
			<choose>
				<when test="searchCondition == 'subscriber'">
					order by subscriber desc limit ${num}
				</when>
				<when test="searchCondition == 'totalViewCount'">
					order by totalViewCount desc limit ${num}
				</when>
				<when test="searchCondition == 'totalVideoCount'">
					order by totalVideoCount desc limit ${num}
				</when>
				<when test="searchCondition == 'grade'">
					order by grade desc limit ${num}
				</when>
				<when test="searchCondition == 'clickCount'">
					order by clickCount desc limit ${num}
				</when>
				<when test="searchCondition == 'updatedDate'">
					order by updatedDate desc limit ${num}
				</when>
				<otherwise>
					limit 0
				</otherwise>
			</choose>
		</if>
	</select>
	
	<!-- youtuber 고유번호 | news 테이블에서 해당 youtuber의 news 조회 | 기사 날짜 기준 내림차순 -->
	<select id="searchNews" parameterType="int" resultType="news">
		<!-- select n.nno, n.yno, n.newsLink, n.newsTitle, n.newsDescription, n.newsDate, n.pressName, n.clickCount -->
		select *
		from youtuber y inner join news n
		using (yno)
		where y.yno = #{yno}
		order by newsDate desc
	</select>
	
	<!-- youtuber 고유번호 | video 테이블에서 youtuber가 올린 video 조회 | 영상 조회수 기준 내림차순 -->
	<select id="searchVideo" parameterType="int" resultType="video">
		select v.vno, v.yno, v.videoID, v.videoName, v.videoDescription, v.videoViewCount, v.videoCommentCount, 
		v.good, v.bad, v.regDate, v.ycano, v.tags, v.thumbnail
		from youtuber y inner join video v
		using (yno)
		where y.yno = #{yno}
		order by regDate desc
	</select>
	
	<!-- 유투버 상세페이지에 보여줄 커뮤니티 검색 / 언급수 높은 순으로 -->
	<!-- <select id="searchCommunity" parameterType="int" resultType="community">
		select *
		from community_youtuber_relation core inner join community c
		using (cono)
		where core.yno = #{yno}
		order by mentionCount desc
	</select> -->
	
	<!-- youtuber 고유번호 | 변화 추이(trend) 테이블 조회 | 기록 일자 기준 내림차순-->
	<select id="searchTrend" parameterType="int" resultType="trend">
		select *
		from trend
		where yno = #{yno}
		order by recordDate desc		
	</select>
	
	<!-- youtuber 고유번호, 검색  개수 | 검색 개수만큼 youtuber의 최근 video 정보 및 그 video의 좋아요 싫어요 비율 정보(goodRatio)를 검색 | 영상 등록일 기준 내림차순 -->
	<select id="searchVideoGoodRatio" parameterType="java.util.Map" resultType="video">
		select *, nvl(good / (good + bad), '0') goodRatio
		from video
		where yno = #{yno} 
		order by regDate desc
		limit #{num}
	</select>
	
	<!-- youtuber 고유번호, 검색 개수 | 검색 개수만큼 youtuber의 최근 video의 좋아요 싫어요 개수 합산 비율 정보(goodRatio) | 총합산비율 하나만 나옴 -->
	<select id="searchGoodRatio" parameterType="java.util.Map" resultType="Double">
		select nvl(sum(v.good) / (sum(v.good) + sum(v.bad)), '0') as goodRatio
		from (select good, bad
				from video
				where yno = #{yno}
				order by regDate desc
				limit #{num}) v;
	</select>
	
	<!-- 오늘이 시작. 오늘부터 term달 간 -->
	<!-- youtuber 고유번호, 검색 기간(달) | 최근 검색 기간(달) 동안 업로드 한 영상 총 개수  -->
	<select id="searchVideoCount" parameterType="java.util.Map" resultType="int">
		select count(vno) videoCount
		from video
		WHERE yno = #{yno} and date(regDate) >= SUBDATE(NOW(), INTERVAL #{term} MONTH)
	</select>
	
	<!-- 오늘이 시작 아님. 월-일이 한 주임. 오늘 날짜가 포함된 주 포함. -->
	<!-- youtuber 고유번호, 검색 기간(주) | 최근 검색 기간(주) 동안 매 주 업로드한 영상 개수 (총 term주간) | 영상 등록일 기준 오름차순 -->
	<select id="searchTermVideoCount" parameterType="java.util.Map" resultType="int">
		<!-- select T.week_lastday week, ifnull(C.count, 0) count -->
		select ifnull(C.count, 0) count
		from temp_week T
		left outer join
			(select adddate(regDate, - weekday(regDate) + 6) regDate, count(*) count
				from video 
				where yno=#{yno}
			    group by adddate(regDate, - weekday(regDate) + 6)) C
		ON T.week_lastday = C.regDate
		where T.week_lastday between date_sub(adddate(now(), - weekday(now()) + 6), interval #{term} week) 
								and adddate(now(), - weekday(now()) + 6)
		order by T.week_lastday asc;
		
		<!-- select count(*) videoCount
		from video 
		where yno=#{yno}
			and regDate 
				between date_sub(DATE_ADD(now(), INTERVAL (DAYOFWEEK(now())-1) * -1 DAY), INTERVAL #{num} week) 
		        and DATE_ADD(now(), INTERVAL (DAYOFWEEK(now())-1) * -1 DAY)
		group by date_format(regDate, '%y-%u')
		order by date_format(regDate, '%y-%u') asc -->
		
		<!-- 이전 코드 (사용X) -->
		<!-- select count(*) videoCount
		from video
		where yno=${yno}
			and regDate between date_add(NOW(), INTERVAL ${end} WEEK)
								and date_add(NOW(), INTERVAL ${start} WEEK) -->
	</select>
	
	<!-- 오늘이 시작 아님. 오늘을 포함한 매 달 기준 -->
	<!-- youtuber 고유번호, 검색 기간(달) | 최근 검색 기간(달)마다 매 달 커뮤니티에 언급된 횟수 (총 term달간) | 글 날짜 기준 오름차순 -->
	<select id="searchCommunityMentionCount" parameterType="java.util.Map" resultType="int">
		<!-- SELECT date_format(T.month_date, '%y-%m'), ifnull(C.count, 0) count -->
		SELECT ifnull(C.count, 0) count
		FROM temp_month T
		LEFT OUTER JOIN
			(select articleDate, count(*) count
			from community
			where yno=#{yno}
			group by date_format(articleDate, '%y-%m')) C
		ON date_format(T.month_date, '%y-%m') = date_format(C.articleDate, '%y-%m')
		where date_format(now(), '%y-%m') &gt;= date_format(T.month_date, '%y-%m')
				and date_format(date_sub(now(), INTERVAL (#{term} - 1) MONTH), '%y-%m') &lt;= date_format(T.month_date, '%y-%m')
		order by date_format(T.month_date, '%y-%m') asc
	</select>
	
	<!-- 오늘이 시작 아님. 오늘을 포함한 매 달 기준 -->
	<!-- youtuber 고유번호, 검색 기간(달) | 최근 검색 기간(달)마다 매 달 뉴스에 언급된 횟수 (총 term달간) | 기사 날짜 기준 오름차순 -->
	<select id="searchNewsMentionCount" parameterType="java.util.Map" resultType="int">
		SELECT ifnull(C.count, 0) count
		FROM temp_month T
		LEFT OUTER JOIN
			(select newsDate, count(*) count
			from news
			where yno=#{yno}
			group by date_format(newsDate, '%y-%m')) C
		ON date_format(T.month_date, '%y-%m') = date_format(C.newsDate, '%y-%m')
		where date_format(now(), '%y-%m') &gt;= date_format(T.month_date, '%y-%m')
				and date_format(date_sub(now(), INTERVAL (#{term} - 1) MONTH), '%y-%m') &lt;= date_format(T.month_date, '%y-%m')
		order by date_format(T.month_date, '%y-%m') asc
	</select>

	<!-- youtuber 고유번호, 검색 개수 | 구독자 총합의 증감 추이 | 기록 일자 기준 오름차순 -->
	<select id="searchSubscriberCountDif" parameterType="java.util.Map" resultType="trend">
		select *
		from 
				(select *
				from trend
				where yno=#{yno}
				order by recordDate desc
				limit #{num}) a
		order by recordDate asc
	</select>
</mapper>